package sermaye;


import java.util.LinkedList;
import java.util.Queue;

/**
 * Worker class that performs operations in another thread.
 *
 * @author lkallas
 */
public class ThreadWorker implements Runnable {

    private final int id;
    private volatile Queue workQueue;   //Does this have to volatile??

    /**
     * Class constructor.
     *
     * @param threadName Name of the thread for identifying.
     *
     */
    public ThreadWorker(int threadId) {
        this.id = threadId;
        this.workQueue = new LinkedList();
    }

    /**
     * Adds items to the queue.
     *
     * @param object Object to be added to the queue.
     */
    public synchronized void addToQueue(String object) {
        workQueue.add(object); //Does it have to be syncronized void
    }
    
    public void processSentences(String sentence) {
    	String[] arr = sentence.split(" ");
    	for (String string : arr) {
			if(Multithreading.map.get(string) != null){
				Multithreading.map.put(string, String.valueOf(Integer.parseInt(Multithreading.map.get(string))+1));
			}else {
				Multithreading.map.put(string,"1");
			}
		}
    	Multithreading.map.put(sentence, sentence);
    	
    }

    @Override
    public void run() {
    	System.out.println("ThreadId : " + this.id + " count : " + workQueue.size());
        while (true) {
            if (!workQueue.isEmpty()) {
                String item = (String) workQueue.peek();
                //Process item
               // System.out.println(" just processed " + item);
                workQueue.remove();
            }
        }
    }
}